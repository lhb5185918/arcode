# 我使用的事python+Arcade 2.6.17的技术栈开发
# 如果自己不明白可以访问对应的开发文档：https://www.osgeo.cn/arcade/
# 我需要一个90后童年互动房间的游戏，游戏需要包含以下内容：
# 一步一步开发游戏
# 注意：开发过程中避免一个文件过长，避免一个文件过大的问题
# 你要在开发的过程中不断吸取问题，出现过的问题可以记录到cursor的笔记中，方便后续的开发
# 需要将游戏的逻辑功能也记录到笔记中，方便后续的开发

# 由于Arcade 3.0版本API不稳定，我们选择降级到Arcade 2.6.17。主要变更：
# 1. 文本绘制参数为 start_x, start_y（不是 x, y）
# 2. on_draw 方法中使用 arcade.start_render()（不是 self.clear()）
# 3. GUI组件可以使用 with_space_around() 方法
# 4. 按钮应使用 UIFlatButton 并可通过style字典设置样式
# 5. 布局使用 UIAnchorWidget 来居中放置UI元素
# 6. 模块结构不同：在2.6.17中不存在arcade.text和arcade.texture子模块，所有函数直接从arcade主模块导入
# 7. 颜色常量有差异：2.6.17中不存在某些颜色如GRAY_GREEN, GRAY_BLUE, GRAY_BROWN, BLUE_PURPLE等，需要使用其他替代颜色
# 8. 2.6.17中不存在arcade.color.random_color()方法，需要自己实现随机颜色生成函数

# ==================== 游戏已开发功能 ====================

# 1. 系统架构：
#    - 使用基于View的页面转换系统，实现多场景切换
#    - 面向对象设计，使用继承机制创建各类交互物品
#    - 独立的文件结构，避免单文件过大问题

# 2. 登录系统(login_view.py)：
#    - 动态登录界面，支持用户名和密码输入
#    - 版本切换功能，可在基础版和增强版间切换
#    - 动画效果（星星、彩色气球、云朵等）
#    - 90后风格的彩色UI元素

# 3. 卧室场景(bedroom_view.py)：
#    - 实现为游戏的过渡页面和中转站
#    - 开场白文字效果（淡入淡出）
#    - 玩家名称个性化显示
#    - 提示信息系统

# 4. 可交互物品系统(bedroom_items.py)：
#    - 基础物品类(BedroomItem)，实现通用交互方法
#    - 床(Bed)：点击显示随机信息，展示毛绒玩具
#    - 书桌(Desk)：带有台灯和学习用品
#    - 电脑(Computer)：可开关机，四种界面切换(QQ、游戏、网页、聊天)
#    - 暑假作业(HomeworkBook)：带进度系统，可通过双击增加完成进度
#    - 窗户(Window)：日夜切换功能，开关窗户，动画效果(星星闪烁、云朵移动)

# 5. 交互方式：
#    - 左键点击：基本交互
#    - 右键点击：电脑关机、窗户切换日夜
#    - 双击：暑假作业进度增加
#    - 鼠标悬停：显示物品名称和高亮效果

# 6. 增强版游戏(enhanced_game.py)：
#    - 电视和遥控器联动系统
#    - 游戏机：开关机和游戏切换
#    - 收音机：音量和频道调节
#    - 书架：多本书的阅读功能

# 7. 用户体验功能：
#    - 消息反馈系统：显示交互结果
#    - 物品状态记忆：保持物品的开关状态
#    - 提示信息系统：指导用户如何交互
#    - 90后怀旧风格的视觉设计

# 8. 动画与视觉效果：
#    - 动态背景元素
#    - 文字淡入淡出效果
#    - 物品交互动画
#    - 日夜变化的视觉效果

# ==================== 遇到的问题及解决方案 ====================

# 1. 视图对象重用错误：
#    - 问题描述：登录按钮点击时报错"RuntimeError: You are attempting to pass the same view object between multiple windows."
#    - 原因分析：在login_view.py的on_login_button_click方法中，每次点击都创建了新的BedroomView对象，但视图对象只能在一个窗口中使用
#    - 解决方案：
#      1) 在login_view.py中添加异常处理，捕获视图切换错误并进行恢复：
#         ```python
#         try:
#             bedroom_view = BedroomView(self.use_enhanced_version, username)
#             self.window.show_view(bedroom_view)
#         except Exception as e:
#             print(f"切换视图时出错: {e}")
#             self.manager.disable()
#             bedroom_view = BedroomView(self.use_enhanced_version, username)
#             self.window.show_view(bedroom_view)
#         ```
#      2) 修改窗口创建逻辑，确保只创建一个窗口实例：
#         ```python
#         # 全局变量，用于确保只创建一个窗口实例
#         window = None
#         
#         def main():
#             global window
#             # 如果窗口已存在，则不再创建新窗口
#             if window is None:
#                 window = arcade.Window(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
#                 # ...其余代码
#         ```
#      3) 创建单独的main.py作为游戏唯一入口点，避免多个入口文件导致多个窗口实例：
#         ```python
#         import arcade
#         from login_view import LoginView
#         from interactive_room_game import SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE
#         
#         def main():
#             window = arcade.Window(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
#             login_view = LoginView()
#             window.show_view(login_view)
#             arcade.run()
#         
#         if __name__ == "__main__":
#             main()
#         ```

# 2. 视图对象共享问题（续）：
#    - 问题描述：即使采用了上述解决方案，仍然会出现"You are attempting to pass the same view object between multiple windows"错误
#    - 原因分析：
#      a) Arcade框架设计中，一个视图对象只能绑定到一个窗口
#      b) 游戏中可能存在多个窗口实例，或者视图对象在多个地方被重复使用
#      c) 在场景切换过程中，如果发生重复点击，可能会导致视图对象混乱
#    - 深入解决方案：
#      1) 使用全局变量GAME_WINDOW统一管理游戏窗口，并在启动前关闭可能存在的旧窗口：
#         ```python
#         # 全局窗口实例
#         GAME_WINDOW = None
#         
#         def main():
#             global GAME_WINDOW
#             # 如果已经有窗口实例，关闭它
#             if GAME_WINDOW is not None:
#                 GAME_WINDOW.close()
#             # 创建新窗口
#             GAME_WINDOW = arcade.Window(...)
#         ```
#      2) 在视图类中添加切换锁定机制，防止重复点击导致的问题：
#         ```python
#         # 在视图类初始化中
#         self.is_transitioning = False
#         
#         # 在点击处理中
#         if self.is_transitioning:
#             return  # 如果正在切换，忽略点击
#         self.is_transitioning = True  # 标记正在切换
#         ```
#      3) 改变场景切换的方式，使用延迟加载替代直接创建：
#         ```python
#         def direct_to_game(self):
#             """创建并切换到游戏视图"""
#             try:
#                 from main import GAME_WINDOW  # 导入全局窗口
#                 game_view = GameClass(...)
#                 GAME_WINDOW.show_view(game_view)
#             except Exception as e:
#                 print(f"进入游戏时出错: {e}")
#                 self.is_transitioning = False  # 出错时重置标记
#         ```

# 3. Arcade 2.6.17中GUI模块导入和绘制文本问题：
#    - 问题描述：游戏启动时报错"AttributeError: module 'arcade' has no attribute 'gui'"以及运行时报错"When the parameters 'multiline' and 'wrap_lines' are True, the parameter 'width' must be a number"
#    - 原因分析：
#      a) Arcade 2.6.17版本中GUI模块需要单独导入，不能作为arcade模块的直接属性访问
#      b) draw_text函数在绘制多行文本时，width参数必须是数字类型，而不能是表达式或浮点数
#    - 解决方案：
#      1) 正确导入GUI模块：
#         ```python
#         import arcade
#         import arcade.gui  # 单独导入GUI模块
#         ```
#      2) 确保draw_text函数的width参数是整数：
#         ```python
#         # 不正确的用法（可能导致错误）
#         arcade.draw_text(
#             text="示例文本",
#             start_x=x, start_y=y,
#             width=SCREEN_WIDTH * 0.8,  # 这可能是浮点数
#             align="center"
#         )
#         
#         # 正确的用法
#         arcade.draw_text(
#             text="示例文本",
#             start_x=x, start_y=y,
#             width=int(SCREEN_WIDTH * 0.8),  # 确保是整数
#             align="center"
#         )
#         ```
#      3) 可以编写修复脚本自动处理所有文件中的draw_text调用：
#         ```python
#         import re
#         
#         def fix_draw_text_in_file(file_path):
#             with open(file_path, 'r', encoding='utf-8') as f:
#                 content = f.read()
#             
#             pattern = r'arcade\.draw_text\([^)]*width=([^,\)]+)'
#             
#             def replace_width(match):
#                 width_param = match.group(1).strip()
#                 if not width_param.isdigit() and not width_param.startswith('int('):
#                     return match.group(0).replace(f'width={width_param}', f'width=int({width_param})')
#                 return match.group(0)
#             
#             modified_content = re.sub(pattern, replace_width, content)
#             
#             if content != modified_content:
#                 with open(file_path, 'w', encoding='utf-8') as f:
#                     f.write(modified_content)
#         ```

# 4. Arcade 2.6.17中绘图函数命名不一致问题：
#    - 问题描述：游戏运行时报错"AttributeError: module 'arcade' has no attribute 'draw_rect_filled'"
#    - 原因分析：Arcade 2.6.17版本中，绘制函数的命名与较新版本不同，例如绘制矩形使用的是`draw_rectangle_filled`而不是`draw_rect_filled`
#    - 解决方案：
#      1) 使用正确的函数名：
#         ```python
#         # 错误的用法（较新版本）
#         arcade.draw_rect_filled(arcade.rect.XYWH(x, y, width, height), color)
#         
#         # 正确的用法（2.6.17版本）
#         arcade.draw_rectangle_filled(x, y, width, height, color)
#         ```
#      2) 注意参数格式的不同：
#         - 较新版本使用`arcade.rect.XYWH`对象作为第一个参数
#         - 2.6.17版本直接使用x, y, width, height作为独立参数
#      3) 其他类似函数也要注意命名差异，比如：
#         - draw_circle_filled
#         - draw_rectangle_outline

# 5. Arcade 2.6.17中文本绘制参数不支持background_color：
#    - 问题描述：游戏运行时报错"TypeError: draw_text() got an unexpected keyword argument 'background_color'"
#    - 原因分析：Arcade 2.6.17版本的draw_text函数不支持background_color参数，这是较新版本才有的功能
#    - 解决方案：
#      1) 移除background_color参数：
#         ```python
#         # 错误的用法（较新版本）
#         arcade.draw_text(
#             text="示例文本",
#             start_x=x, start_y=y,
#             color=arcade.color.WHITE,
#             background_color=(0, 0, 0, 150)  # 这在2.6.17中不支持
#         )
#         
#         # 正确的用法（2.6.17版本）
#         arcade.draw_text(
#             text="示例文本",
#             start_x=x, start_y=y,
#             color=arcade.color.WHITE
#         )
#         ```
#      2) 通过单独绘制背景矩形来实现类似效果：
#         ```python
#         # 先绘制背景矩形
#         text_width = len(text) * 8  # 估计文本宽度
#         arcade.draw_rectangle_filled(
#             x + text_width/2, y + 8,  # 矩形中心位置
#             text_width, 20,           # 矩形宽高
#             (0, 0, 0, 150)            # 颜色和透明度
#         )
#         
#         # 再绘制文本
#         arcade.draw_text(
#             text="示例文本",
#             start_x=x, start_y=y,
#             color=arcade.color.WHITE
#         )
#         ```